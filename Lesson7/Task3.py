# Реализовать программу работы с органическими клетками, состоящими из ячеек.
# Необходимо создать класс Клетка.  В его конструкторе инициализировать
# параметр, соответствующий количеству ячеек клетки (целое число).  В классе
# должны быть реализованы методы перегрузки арифметических операторов: сложение
# (__add__()), вычитание (__sub__()), умножение (__mul__()), деление
# (__truediv__()).  Данные методы должны применяться только к клеткам и
# выполнять увеличение, уменьшение, умножение и целочисленное (с округлением до
# целого) деление клеток, соответственно.
#
# Сложение.  Объединение двух клеток.  При этом число ячеек общей клетки должно
# равняться сумме ячеек исходных двух клеток.
#
# Вычитание.  Участвуют две клетки.  Операцию необходимо выполнять только если
# разность количества ячеек двух клеток больше нуля, иначе выводить
# соответствующее сообщение.
#
# Умножение.  Создается общая клетка из двух.  Число ячеек общей клетки
# определяется как произведение количества ячеек этих двух клеток.
#
# Деление.  Создается общая клетка из двух.  Число ячеек общей клетки
# определяется как целочисленное деление количества ячеек этих двух клеток.
#
# В классе необходимо реализовать метод make_order(), принимающий экземпляр
# класса и количество ячеек в ряду.  Данный метод позволяет организовать ячейки
# по рядам.
#
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество
# ячеек между \n равно переданному аргументу.  Если ячеек на формирование ряда
# не хватает, то в последний ряд записываются все оставшиеся.
#
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n**.
#
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n*****.
#
# Подсказка: подробный список операторов для перегрузки доступен по ссылке:
# https://pythonworld.ru/osnovy/peregruzka-operatorov.html
#
class Cell:
    def __init__(self, count):
        self._count = count

    @property
    def count(self):
        return self._count

    def make_order(self, row_len):
        
        row_count = self.count // row_len
        last_items_count = self.count - row_count * row_len
        
        result = ""
        for row in range(0, row_count):
            result += "*" * row_len + "\n"

        if last_items_count > 0:
            result += "*" * last_items_count
        else:
           result = result[:-1]

        return result

    def __add__(self, other):
        return Cell(self.count + other.count)

    def __sub__(self, other):
        if(self.count <= other.count):
            print("Не удается выполнить операцию вычитания, в клетке не достаточно ячеек")
        return Cell(self.count - other.count)

    def __mul__(self, other):
        return Cell(self.count * other.count)

    def __truediv__(self, other):
        if(other.count == 0):
            print("Не удается выполнить операцию деления, делитель не может быть 0")
        return Cell(self.count // other.count)    

    def __str__(self):
        return str(self.count)
   

cell_1 = Cell(27)
cell_2 = Cell(7)

print(cell_1 + cell_2)
print(cell_1 - cell_2)
print(cell_1 * cell_2)
print(cell_1 / cell_2)

print()
print(cell_1.make_order(7))
